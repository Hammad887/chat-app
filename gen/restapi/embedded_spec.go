// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Chatroom",
    "version": "0.0.1"
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "paths": {
    "/chatrooms": {
      "get": {
        "description": "fetch all chatrooms base on filter",
        "tags": [
          "service"
        ],
        "operationId": "getAllChatrooms",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully save user object into database",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Chatroom"
              }
            }
          },
          "204": {
            "description": "no content in database"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "default": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/chatrooms/{chatroom_id}": {
      "get": {
        "description": "get chatroom base on id",
        "tags": [
          "service"
        ],
        "operationId": "getChatroom",
        "parameters": [
          {
            "type": "string",
            "name": "chatroom_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully save user object into database",
            "schema": {
              "$ref": "#/definitions/Chatroom"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "default": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/chatrooms/{chatroom_id}/messages": {
      "get": {
        "description": "fetch all messages in chatroom",
        "tags": [
          "service"
        ],
        "operationId": "getAllMessages",
        "parameters": [
          {
            "type": "string",
            "name": "chatroom_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully save user object into database",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/message"
              }
            }
          },
          "204": {
            "description": "no content in database"
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "404": {
            "$ref": "#/responses/404"
          },
          "default": {
            "$ref": "#/responses/500"
          }
        }
      },
      "post": {
        "description": "send message to chatroom",
        "tags": [
          "service"
        ],
        "operationId": "sendMessage",
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/message"
            }
          },
          {
            "type": "string",
            "name": "chatroom_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "successfully save user object into database",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "default": {
            "$ref": "#/responses/500"
          }
        }
      }
    },
    "/login": {
      "post": {
        "description": "Returns token for authorized User",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "service"
        ],
        "operationId": "Login",
        "parameters": [
          {
            "description": "Login Payload",
            "name": "login",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful login",
            "schema": {
              "$ref": "#/definitions/LoginSuccess"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "description": "logout a user",
        "tags": [
          "service"
        ],
        "operationId": "Logout",
        "parameters": [
          {
            "name": "logout",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful logout",
            "schema": {
              "$ref": "#/definitions/LogoutSuccess"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "register new user to database",
        "tags": [
          "service"
        ],
        "operationId": "registerUser",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully save user object into database",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "401": {
            "$ref": "#/responses/401"
          },
          "409": {
            "$ref": "#/responses/409"
          },
          "default": {
            "$ref": "#/responses/500"
          }
        }
      }
    }
  },
  "definitions": {
    "ArrayOfMessages": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/message"
      }
    },
    "Chatroom": {
      "type": "object",
      "required": [
        "id",
        "name",
        "users"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LoginInfo": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "LoginSuccess": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "LogoutSuccess": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "SuccessResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      }
    },
    "Token": {
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "example": "error code"
        },
        "message": {
          "type": "string",
          "example": "error message"
        }
      }
    },
    "message": {
      "type": "object",
      "required": [
        "text",
        "sender_id",
        "room_id"
      ],
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "room_id": {
          "type": "string"
        },
        "sender_id": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "update_user": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 32,
          "minLength": 3
        }
      }
    },
    "user": {
      "type": "object",
      "required": [
        "name",
        "password",
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "name": {
          "type": "string",
          "maxLength": 32,
          "minLength": 3
        },
        "password": {
          "type": "string"
        }
      }
    },
    "user_response": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "400": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "404": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "409": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "500": {
      "description": "Internal Server Error",
      "schema": {
        "$ref": "#/definitions/error"
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Chatroom",
    "version": "0.0.1"
  },
  "host": "localhost:8080",
  "basePath": "/v1",
  "paths": {
    "/chatrooms": {
      "get": {
        "description": "fetch all chatrooms base on filter",
        "tags": [
          "service"
        ],
        "operationId": "getAllChatrooms",
        "parameters": [
          {
            "minimum": 1,
            "type": "integer",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "name": "name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "successfully save user object into database",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Chatroom"
              }
            }
          },
          "204": {
            "description": "no content in database"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/chatrooms/{chatroom_id}": {
      "get": {
        "description": "get chatroom base on id",
        "tags": [
          "service"
        ],
        "operationId": "getChatroom",
        "parameters": [
          {
            "type": "string",
            "name": "chatroom_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully save user object into database",
            "schema": {
              "$ref": "#/definitions/Chatroom"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/chatrooms/{chatroom_id}/messages": {
      "get": {
        "description": "fetch all messages in chatroom",
        "tags": [
          "service"
        ],
        "operationId": "getAllMessages",
        "parameters": [
          {
            "type": "string",
            "name": "chatroom_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "successfully save user object into database",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/message"
              }
            }
          },
          "204": {
            "description": "no content in database"
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "404": {
            "description": "Not Found",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      },
      "post": {
        "description": "send message to chatroom",
        "tags": [
          "service"
        ],
        "operationId": "sendMessage",
        "parameters": [
          {
            "name": "message",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/message"
            }
          },
          {
            "type": "string",
            "name": "chatroom_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "201": {
            "description": "successfully save user object into database",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "description": "Returns token for authorized User",
        "consumes": [
          "application/json"
        ],
        "tags": [
          "service"
        ],
        "operationId": "Login",
        "parameters": [
          {
            "description": "Login Payload",
            "name": "login",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/LoginInfo"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful login",
            "schema": {
              "$ref": "#/definitions/LoginSuccess"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "description": "logout a user",
        "tags": [
          "service"
        ],
        "operationId": "Logout",
        "parameters": [
          {
            "name": "logout",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Token"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful logout",
            "schema": {
              "$ref": "#/definitions/LogoutSuccess"
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "404": {
            "description": "User not found",
            "schema": {
              "type": "string"
            }
          },
          "500": {
            "description": "Server error",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "description": "register new user to database",
        "tags": [
          "service"
        ],
        "operationId": "registerUser",
        "parameters": [
          {
            "name": "user",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/user"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "successfully save user object into database",
            "schema": {
              "$ref": "#/definitions/SuccessResponse"
            }
          },
          "401": {
            "description": "Unauthorized",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "409": {
            "description": "Conflict",
            "schema": {
              "$ref": "#/definitions/error"
            }
          },
          "default": {
            "description": "Internal Server Error",
            "schema": {
              "$ref": "#/definitions/error"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ArrayOfMessages": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/message"
      }
    },
    "Chatroom": {
      "type": "object",
      "required": [
        "id",
        "name",
        "users"
      ],
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "users": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "LoginInfo": {
      "type": "object",
      "required": [
        "email",
        "password"
      ],
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "LoginSuccess": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "LogoutSuccess": {
      "type": "object",
      "properties": {
        "success": {
          "type": "boolean"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "SuccessResponse": {
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "success": {
          "type": "boolean"
        }
      }
    },
    "Token": {
      "type": "object",
      "required": [
        "token"
      ],
      "properties": {
        "token": {
          "type": "string"
        }
      }
    },
    "error": {
      "type": "object",
      "required": [
        "code",
        "message"
      ],
      "properties": {
        "code": {
          "type": "string",
          "example": "error code"
        },
        "message": {
          "type": "string",
          "example": "error message"
        }
      }
    },
    "message": {
      "type": "object",
      "required": [
        "text",
        "sender_id",
        "room_id"
      ],
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "room_id": {
          "type": "string"
        },
        "sender_id": {
          "type": "string"
        },
        "text": {
          "type": "string"
        }
      }
    },
    "update_user": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "name": {
          "type": "string",
          "maxLength": 32,
          "minLength": 3
        }
      }
    },
    "user": {
      "type": "object",
      "required": [
        "name",
        "password",
        "email"
      ],
      "properties": {
        "email": {
          "type": "string",
          "format": "email"
        },
        "name": {
          "type": "string",
          "maxLength": 32,
          "minLength": 3
        },
        "password": {
          "type": "string"
        }
      }
    },
    "user_response": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    }
  },
  "responses": {
    "400": {
      "description": "Bad Request",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "401": {
      "description": "Unauthorized",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "403": {
      "description": "Forbidden",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "404": {
      "description": "Not Found",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "409": {
      "description": "Conflict",
      "schema": {
        "$ref": "#/definitions/error"
      }
    },
    "500": {
      "description": "Internal Server Error",
      "schema": {
        "$ref": "#/definitions/error"
      }
    }
  },
  "securityDefinitions": {
    "Bearer": {
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  }
}`))
}
