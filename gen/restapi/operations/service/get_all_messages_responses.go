// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Hammad887/chat-app/gen/models"
)

// GetAllMessagesOKCode is the HTTP code returned for type GetAllMessagesOK
const GetAllMessagesOKCode int = 200

/*
GetAllMessagesOK successfully save user object into database

swagger:response getAllMessagesOK
*/
type GetAllMessagesOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Message `json:"body,omitempty"`
}

// NewGetAllMessagesOK creates GetAllMessagesOK with default headers values
func NewGetAllMessagesOK() *GetAllMessagesOK {

	return &GetAllMessagesOK{}
}

// WithPayload adds the payload to the get all messages o k response
func (o *GetAllMessagesOK) WithPayload(payload []*models.Message) *GetAllMessagesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all messages o k response
func (o *GetAllMessagesOK) SetPayload(payload []*models.Message) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllMessagesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Message, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// GetAllMessagesNoContentCode is the HTTP code returned for type GetAllMessagesNoContent
const GetAllMessagesNoContentCode int = 204

/*
GetAllMessagesNoContent no content in database

swagger:response getAllMessagesNoContent
*/
type GetAllMessagesNoContent struct {
}

// NewGetAllMessagesNoContent creates GetAllMessagesNoContent with default headers values
func NewGetAllMessagesNoContent() *GetAllMessagesNoContent {

	return &GetAllMessagesNoContent{}
}

// WriteResponse to the client
func (o *GetAllMessagesNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// GetAllMessagesUnauthorizedCode is the HTTP code returned for type GetAllMessagesUnauthorized
const GetAllMessagesUnauthorizedCode int = 401

/*
GetAllMessagesUnauthorized Unauthorized

swagger:response getAllMessagesUnauthorized
*/
type GetAllMessagesUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAllMessagesUnauthorized creates GetAllMessagesUnauthorized with default headers values
func NewGetAllMessagesUnauthorized() *GetAllMessagesUnauthorized {

	return &GetAllMessagesUnauthorized{}
}

// WithPayload adds the payload to the get all messages unauthorized response
func (o *GetAllMessagesUnauthorized) WithPayload(payload *models.Error) *GetAllMessagesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all messages unauthorized response
func (o *GetAllMessagesUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllMessagesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetAllMessagesNotFoundCode is the HTTP code returned for type GetAllMessagesNotFound
const GetAllMessagesNotFoundCode int = 404

/*
GetAllMessagesNotFound Not Found

swagger:response getAllMessagesNotFound
*/
type GetAllMessagesNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAllMessagesNotFound creates GetAllMessagesNotFound with default headers values
func NewGetAllMessagesNotFound() *GetAllMessagesNotFound {

	return &GetAllMessagesNotFound{}
}

// WithPayload adds the payload to the get all messages not found response
func (o *GetAllMessagesNotFound) WithPayload(payload *models.Error) *GetAllMessagesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all messages not found response
func (o *GetAllMessagesNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllMessagesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*
GetAllMessagesDefault Internal Server Error

swagger:response getAllMessagesDefault
*/
type GetAllMessagesDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetAllMessagesDefault creates GetAllMessagesDefault with default headers values
func NewGetAllMessagesDefault(code int) *GetAllMessagesDefault {
	if code <= 0 {
		code = 500
	}

	return &GetAllMessagesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get all messages default response
func (o *GetAllMessagesDefault) WithStatusCode(code int) *GetAllMessagesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get all messages default response
func (o *GetAllMessagesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get all messages default response
func (o *GetAllMessagesDefault) WithPayload(payload *models.Error) *GetAllMessagesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get all messages default response
func (o *GetAllMessagesDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetAllMessagesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
