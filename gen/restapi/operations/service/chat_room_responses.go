// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/Hammad887/chat-app/gen/models"
)

// ChatRoomOKCode is the HTTP code returned for type ChatRoomOK
const ChatRoomOKCode int = 200

/*
ChatRoomOK Successful created a chatroom

swagger:response chatRoomOK
*/
type ChatRoomOK struct {

	/*
	  In: Body
	*/
	Payload *models.ChatroomSuccess `json:"body,omitempty"`
}

// NewChatRoomOK creates ChatRoomOK with default headers values
func NewChatRoomOK() *ChatRoomOK {

	return &ChatRoomOK{}
}

// WithPayload adds the payload to the chat room o k response
func (o *ChatRoomOK) WithPayload(payload *models.ChatroomSuccess) *ChatRoomOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the chat room o k response
func (o *ChatRoomOK) SetPayload(payload *models.ChatroomSuccess) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ChatRoomOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// ChatRoomBadRequestCode is the HTTP code returned for type ChatRoomBadRequest
const ChatRoomBadRequestCode int = 400

/*
ChatRoomBadRequest Bad Request

swagger:response chatRoomBadRequest
*/
type ChatRoomBadRequest struct {
}

// NewChatRoomBadRequest creates ChatRoomBadRequest with default headers values
func NewChatRoomBadRequest() *ChatRoomBadRequest {

	return &ChatRoomBadRequest{}
}

// WriteResponse to the client
func (o *ChatRoomBadRequest) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(400)
}

// ChatRoomNotFoundCode is the HTTP code returned for type ChatRoomNotFound
const ChatRoomNotFoundCode int = 404

/*
ChatRoomNotFound User not found

swagger:response chatRoomNotFound
*/
type ChatRoomNotFound struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewChatRoomNotFound creates ChatRoomNotFound with default headers values
func NewChatRoomNotFound() *ChatRoomNotFound {

	return &ChatRoomNotFound{}
}

// WithPayload adds the payload to the chat room not found response
func (o *ChatRoomNotFound) WithPayload(payload string) *ChatRoomNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the chat room not found response
func (o *ChatRoomNotFound) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ChatRoomNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ChatRoomInternalServerErrorCode is the HTTP code returned for type ChatRoomInternalServerError
const ChatRoomInternalServerErrorCode int = 500

/*
ChatRoomInternalServerError Server error

swagger:response chatRoomInternalServerError
*/
type ChatRoomInternalServerError struct {

	/*
	  In: Body
	*/
	Payload string `json:"body,omitempty"`
}

// NewChatRoomInternalServerError creates ChatRoomInternalServerError with default headers values
func NewChatRoomInternalServerError() *ChatRoomInternalServerError {

	return &ChatRoomInternalServerError{}
}

// WithPayload adds the payload to the chat room internal server error response
func (o *ChatRoomInternalServerError) WithPayload(payload string) *ChatRoomInternalServerError {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the chat room internal server error response
func (o *ChatRoomInternalServerError) SetPayload(payload string) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ChatRoomInternalServerError) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(500)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}
