// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// SaveMessageHandlerFunc turns a function with the right signature into a save message handler
type SaveMessageHandlerFunc func(SaveMessageParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SaveMessageHandlerFunc) Handle(params SaveMessageParams) middleware.Responder {
	return fn(params)
}

// SaveMessageHandler interface for that can handle valid save message params
type SaveMessageHandler interface {
	Handle(SaveMessageParams) middleware.Responder
}

// NewSaveMessage creates a new http.Handler for the save message operation
func NewSaveMessage(ctx *middleware.Context, handler SaveMessageHandler) *SaveMessage {
	return &SaveMessage{Context: ctx, Handler: handler}
}

/*
	SaveMessage swagger:route POST /chatrooms/{chatroom_id}/messages service saveMessage

send message to chatroom
*/
type SaveMessage struct {
	Context *middleware.Context
	Handler SaveMessageHandler
}

func (o *SaveMessage) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSaveMessageParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
