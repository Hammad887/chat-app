// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new service API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption is the option for Client methods
type ClientOption func(*runtime.ClientOperation)

// ClientService is the interface for Client methods
type ClientService interface {
	CreateChatRoom(params *CreateChatRoomParams, opts ...ClientOption) (*CreateChatRoomOK, error)

	Login(params *LoginParams, opts ...ClientOption) (*LoginOK, error)

	Logout(params *LogoutParams, opts ...ClientOption) (*LogoutOK, error)

	SaveMessage(params *SaveMessageParams, opts ...ClientOption) (*SaveMessageCreated, error)

	GetAllChatrooms(params *GetAllChatroomsParams, opts ...ClientOption) (*GetAllChatroomsOK, *GetAllChatroomsNoContent, error)

	GetAllMessages(params *GetAllMessagesParams, opts ...ClientOption) (*GetAllMessagesOK, *GetAllMessagesNoContent, error)

	GetChatroom(params *GetChatroomParams, opts ...ClientOption) (*GetChatroomOK, error)

	RegisterUser(params *RegisterUserParams, opts ...ClientOption) (*RegisterUserCreated, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateChatRoom Creates a new chatroom with the provided name
*/
func (a *Client) CreateChatRoom(params *CreateChatRoomParams, opts ...ClientOption) (*CreateChatRoomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateChatRoomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "CreateChatRoom",
		Method:             "POST",
		PathPattern:        "/create-chat-room",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CreateChatRoomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateChatRoomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateChatRoomDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Login Returns token for authorized User
*/
func (a *Client) Login(params *LoginParams, opts ...ClientOption) (*LoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Login",
		Method:             "POST",
		PathPattern:        "/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Login: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
Logout logout a user
*/
func (a *Client) Logout(params *LogoutParams, opts ...ClientOption) (*LogoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLogoutParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "Logout",
		Method:             "POST",
		PathPattern:        "/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &LogoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LogoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for Logout: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
SaveMessage send message to chatroom
*/
func (a *Client) SaveMessage(params *SaveMessageParams, opts ...ClientOption) (*SaveMessageCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSaveMessageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "SaveMessage",
		Method:             "POST",
		PathPattern:        "/chatrooms/{chatroom_id}/messages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &SaveMessageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SaveMessageCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SaveMessageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAllChatrooms fetch all chatrooms base on filter
*/
func (a *Client) GetAllChatrooms(params *GetAllChatroomsParams, opts ...ClientOption) (*GetAllChatroomsOK, *GetAllChatroomsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllChatroomsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllChatrooms",
		Method:             "GET",
		PathPattern:        "/chatrooms",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllChatroomsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAllChatroomsOK:
		return value, nil, nil
	case *GetAllChatroomsNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAllChatroomsDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetAllMessages fetch all messages in chatroom
*/
func (a *Client) GetAllMessages(params *GetAllMessagesParams, opts ...ClientOption) (*GetAllMessagesOK, *GetAllMessagesNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllMessagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getAllMessages",
		Method:             "GET",
		PathPattern:        "/chatrooms/{chatroom_id}/messages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetAllMessagesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, nil, err
	}
	switch value := result.(type) {
	case *GetAllMessagesOK:
		return value, nil, nil
	case *GetAllMessagesNoContent:
		return nil, value, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetAllMessagesDefault)
	return nil, nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetChatroom get chatroom base on id
*/
func (a *Client) GetChatroom(params *GetChatroomParams, opts ...ClientOption) (*GetChatroomOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetChatroomParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getChatroom",
		Method:             "GET",
		PathPattern:        "/chatrooms/{chatroom_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetChatroomReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetChatroomOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetChatroomDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RegisterUser register new user to database
*/
func (a *Client) RegisterUser(params *RegisterUserParams, opts ...ClientOption) (*RegisterUserCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "registerUser",
		Method:             "POST",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &RegisterUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RegisterUserCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RegisterUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
