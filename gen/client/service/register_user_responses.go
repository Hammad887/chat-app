// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Hammad887/chat-app/gen/models"
)

// RegisterUserReader is a Reader for the RegisterUser structure.
type RegisterUserReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RegisterUserReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewRegisterUserCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRegisterUserUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 409:
		result := NewRegisterUserConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRegisterUserDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRegisterUserCreated creates a RegisterUserCreated with default headers values
func NewRegisterUserCreated() *RegisterUserCreated {
	return &RegisterUserCreated{}
}

/*
RegisterUserCreated describes a response with status code 201, with default header values.

successfully save user object into database
*/
type RegisterUserCreated struct {
	Payload *models.SuccessResponse
}

// IsSuccess returns true when this register user created response has a 2xx status code
func (o *RegisterUserCreated) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this register user created response has a 3xx status code
func (o *RegisterUserCreated) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register user created response has a 4xx status code
func (o *RegisterUserCreated) IsClientError() bool {
	return false
}

// IsServerError returns true when this register user created response has a 5xx status code
func (o *RegisterUserCreated) IsServerError() bool {
	return false
}

// IsCode returns true when this register user created response a status code equal to that given
func (o *RegisterUserCreated) IsCode(code int) bool {
	return code == 201
}

// Code gets the status code for the register user created response
func (o *RegisterUserCreated) Code() int {
	return 201
}

func (o *RegisterUserCreated) Error() string {
	return fmt.Sprintf("[POST /user][%d] registerUserCreated  %+v", 201, o.Payload)
}

func (o *RegisterUserCreated) String() string {
	return fmt.Sprintf("[POST /user][%d] registerUserCreated  %+v", 201, o.Payload)
}

func (o *RegisterUserCreated) GetPayload() *models.SuccessResponse {
	return o.Payload
}

func (o *RegisterUserCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SuccessResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserUnauthorized creates a RegisterUserUnauthorized with default headers values
func NewRegisterUserUnauthorized() *RegisterUserUnauthorized {
	return &RegisterUserUnauthorized{}
}

/*
RegisterUserUnauthorized describes a response with status code 401, with default header values.

Unauthorized
*/
type RegisterUserUnauthorized struct {
	Payload *models.Error
}

// IsSuccess returns true when this register user unauthorized response has a 2xx status code
func (o *RegisterUserUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register user unauthorized response has a 3xx status code
func (o *RegisterUserUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register user unauthorized response has a 4xx status code
func (o *RegisterUserUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this register user unauthorized response has a 5xx status code
func (o *RegisterUserUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this register user unauthorized response a status code equal to that given
func (o *RegisterUserUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the register user unauthorized response
func (o *RegisterUserUnauthorized) Code() int {
	return 401
}

func (o *RegisterUserUnauthorized) Error() string {
	return fmt.Sprintf("[POST /user][%d] registerUserUnauthorized  %+v", 401, o.Payload)
}

func (o *RegisterUserUnauthorized) String() string {
	return fmt.Sprintf("[POST /user][%d] registerUserUnauthorized  %+v", 401, o.Payload)
}

func (o *RegisterUserUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RegisterUserUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserConflict creates a RegisterUserConflict with default headers values
func NewRegisterUserConflict() *RegisterUserConflict {
	return &RegisterUserConflict{}
}

/*
RegisterUserConflict describes a response with status code 409, with default header values.

Conflict
*/
type RegisterUserConflict struct {
	Payload *models.Error
}

// IsSuccess returns true when this register user conflict response has a 2xx status code
func (o *RegisterUserConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this register user conflict response has a 3xx status code
func (o *RegisterUserConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this register user conflict response has a 4xx status code
func (o *RegisterUserConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this register user conflict response has a 5xx status code
func (o *RegisterUserConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this register user conflict response a status code equal to that given
func (o *RegisterUserConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the register user conflict response
func (o *RegisterUserConflict) Code() int {
	return 409
}

func (o *RegisterUserConflict) Error() string {
	return fmt.Sprintf("[POST /user][%d] registerUserConflict  %+v", 409, o.Payload)
}

func (o *RegisterUserConflict) String() string {
	return fmt.Sprintf("[POST /user][%d] registerUserConflict  %+v", 409, o.Payload)
}

func (o *RegisterUserConflict) GetPayload() *models.Error {
	return o.Payload
}

func (o *RegisterUserConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRegisterUserDefault creates a RegisterUserDefault with default headers values
func NewRegisterUserDefault(code int) *RegisterUserDefault {
	return &RegisterUserDefault{
		_statusCode: code,
	}
}

/*
RegisterUserDefault describes a response with status code -1, with default header values.

Internal Server Error
*/
type RegisterUserDefault struct {
	_statusCode int

	Payload *models.Error
}

// IsSuccess returns true when this register user default response has a 2xx status code
func (o *RegisterUserDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this register user default response has a 3xx status code
func (o *RegisterUserDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this register user default response has a 4xx status code
func (o *RegisterUserDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this register user default response has a 5xx status code
func (o *RegisterUserDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this register user default response a status code equal to that given
func (o *RegisterUserDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the register user default response
func (o *RegisterUserDefault) Code() int {
	return o._statusCode
}

func (o *RegisterUserDefault) Error() string {
	return fmt.Sprintf("[POST /user][%d] registerUser default  %+v", o._statusCode, o.Payload)
}

func (o *RegisterUserDefault) String() string {
	return fmt.Sprintf("[POST /user][%d] registerUser default  %+v", o._statusCode, o.Payload)
}

func (o *RegisterUserDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *RegisterUserDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
