// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetAllMessagesParams creates a new GetAllMessagesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetAllMessagesParams() *GetAllMessagesParams {
	return &GetAllMessagesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllMessagesParamsWithTimeout creates a new GetAllMessagesParams object
// with the ability to set a timeout on a request.
func NewGetAllMessagesParamsWithTimeout(timeout time.Duration) *GetAllMessagesParams {
	return &GetAllMessagesParams{
		timeout: timeout,
	}
}

// NewGetAllMessagesParamsWithContext creates a new GetAllMessagesParams object
// with the ability to set a context for a request.
func NewGetAllMessagesParamsWithContext(ctx context.Context) *GetAllMessagesParams {
	return &GetAllMessagesParams{
		Context: ctx,
	}
}

// NewGetAllMessagesParamsWithHTTPClient creates a new GetAllMessagesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetAllMessagesParamsWithHTTPClient(client *http.Client) *GetAllMessagesParams {
	return &GetAllMessagesParams{
		HTTPClient: client,
	}
}

/*
GetAllMessagesParams contains all the parameters to send to the API endpoint

	for the get all messages operation.

	Typically these are written to a http.Request.
*/
type GetAllMessagesParams struct {

	// ChatroomID.
	ChatroomID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get all messages params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllMessagesParams) WithDefaults() *GetAllMessagesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get all messages params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetAllMessagesParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get all messages params
func (o *GetAllMessagesParams) WithTimeout(timeout time.Duration) *GetAllMessagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all messages params
func (o *GetAllMessagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all messages params
func (o *GetAllMessagesParams) WithContext(ctx context.Context) *GetAllMessagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all messages params
func (o *GetAllMessagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all messages params
func (o *GetAllMessagesParams) WithHTTPClient(client *http.Client) *GetAllMessagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all messages params
func (o *GetAllMessagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChatroomID adds the chatroomID to the get all messages params
func (o *GetAllMessagesParams) WithChatroomID(chatroomID string) *GetAllMessagesParams {
	o.SetChatroomID(chatroomID)
	return o
}

// SetChatroomID adds the chatroomId to the get all messages params
func (o *GetAllMessagesParams) SetChatroomID(chatroomID string) {
	o.ChatroomID = chatroomID
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllMessagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param chatroom_id
	if err := r.SetPathParam("chatroom_id", o.ChatroomID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
