// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Hammad887/chat-app/docs/models"
)

// LoginReader is a Reader for the Login structure.
type LoginReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLoginBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLoginNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLoginInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /login] Login", response, response.Code())
	}
}

// NewLoginOK creates a LoginOK with default headers values
func NewLoginOK() *LoginOK {
	return &LoginOK{}
}

/*
LoginOK describes a response with status code 200, with default header values.

Successful login
*/
type LoginOK struct {
	Payload *models.LoginSuccess
}

// IsSuccess returns true when this login o k response has a 2xx status code
func (o *LoginOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login o k response has a 3xx status code
func (o *LoginOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login o k response has a 4xx status code
func (o *LoginOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login o k response has a 5xx status code
func (o *LoginOK) IsServerError() bool {
	return false
}

// IsCode returns true when this login o k response a status code equal to that given
func (o *LoginOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the login o k response
func (o *LoginOK) Code() int {
	return 200
}

func (o *LoginOK) Error() string {
	return fmt.Sprintf("[POST /login][%d] loginOK  %+v", 200, o.Payload)
}

func (o *LoginOK) String() string {
	return fmt.Sprintf("[POST /login][%d] loginOK  %+v", 200, o.Payload)
}

func (o *LoginOK) GetPayload() *models.LoginSuccess {
	return o.Payload
}

func (o *LoginOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LoginSuccess)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginBadRequest creates a LoginBadRequest with default headers values
func NewLoginBadRequest() *LoginBadRequest {
	return &LoginBadRequest{}
}

/*
LoginBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type LoginBadRequest struct {
}

// IsSuccess returns true when this login bad request response has a 2xx status code
func (o *LoginBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login bad request response has a 3xx status code
func (o *LoginBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login bad request response has a 4xx status code
func (o *LoginBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this login bad request response has a 5xx status code
func (o *LoginBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this login bad request response a status code equal to that given
func (o *LoginBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the login bad request response
func (o *LoginBadRequest) Code() int {
	return 400
}

func (o *LoginBadRequest) Error() string {
	return fmt.Sprintf("[POST /login][%d] loginBadRequest ", 400)
}

func (o *LoginBadRequest) String() string {
	return fmt.Sprintf("[POST /login][%d] loginBadRequest ", 400)
}

func (o *LoginBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLoginNotFound creates a LoginNotFound with default headers values
func NewLoginNotFound() *LoginNotFound {
	return &LoginNotFound{}
}

/*
LoginNotFound describes a response with status code 404, with default header values.

User not found
*/
type LoginNotFound struct {
	Payload string
}

// IsSuccess returns true when this login not found response has a 2xx status code
func (o *LoginNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login not found response has a 3xx status code
func (o *LoginNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login not found response has a 4xx status code
func (o *LoginNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this login not found response has a 5xx status code
func (o *LoginNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this login not found response a status code equal to that given
func (o *LoginNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the login not found response
func (o *LoginNotFound) Code() int {
	return 404
}

func (o *LoginNotFound) Error() string {
	return fmt.Sprintf("[POST /login][%d] loginNotFound  %+v", 404, o.Payload)
}

func (o *LoginNotFound) String() string {
	return fmt.Sprintf("[POST /login][%d] loginNotFound  %+v", 404, o.Payload)
}

func (o *LoginNotFound) GetPayload() string {
	return o.Payload
}

func (o *LoginNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginInternalServerError creates a LoginInternalServerError with default headers values
func NewLoginInternalServerError() *LoginInternalServerError {
	return &LoginInternalServerError{}
}

/*
LoginInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type LoginInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this login internal server error response has a 2xx status code
func (o *LoginInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login internal server error response has a 3xx status code
func (o *LoginInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login internal server error response has a 4xx status code
func (o *LoginInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this login internal server error response has a 5xx status code
func (o *LoginInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this login internal server error response a status code equal to that given
func (o *LoginInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the login internal server error response
func (o *LoginInternalServerError) Code() int {
	return 500
}

func (o *LoginInternalServerError) Error() string {
	return fmt.Sprintf("[POST /login][%d] loginInternalServerError  %+v", 500, o.Payload)
}

func (o *LoginInternalServerError) String() string {
	return fmt.Sprintf("[POST /login][%d] loginInternalServerError  %+v", 500, o.Payload)
}

func (o *LoginInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *LoginInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
