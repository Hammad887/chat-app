// Code generated by go-swagger; DO NOT EDIT.

package service

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/Hammad887/chat-app/docs/models"
)

// LogoutReader is a Reader for the Logout structure.
type LogoutReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LogoutReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLogoutOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 400:
		result := NewLogoutBadRequest()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLogoutNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewLogoutInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /logout] Logout", response, response.Code())
	}
}

// NewLogoutOK creates a LogoutOK with default headers values
func NewLogoutOK() *LogoutOK {
	return &LogoutOK{}
}

/*
LogoutOK describes a response with status code 200, with default header values.

Successful logout
*/
type LogoutOK struct {
	Payload *models.LogoutSuccess
}

// IsSuccess returns true when this logout o k response has a 2xx status code
func (o *LogoutOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this logout o k response has a 3xx status code
func (o *LogoutOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this logout o k response has a 4xx status code
func (o *LogoutOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this logout o k response has a 5xx status code
func (o *LogoutOK) IsServerError() bool {
	return false
}

// IsCode returns true when this logout o k response a status code equal to that given
func (o *LogoutOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the logout o k response
func (o *LogoutOK) Code() int {
	return 200
}

func (o *LogoutOK) Error() string {
	return fmt.Sprintf("[POST /logout][%d] logoutOK  %+v", 200, o.Payload)
}

func (o *LogoutOK) String() string {
	return fmt.Sprintf("[POST /logout][%d] logoutOK  %+v", 200, o.Payload)
}

func (o *LogoutOK) GetPayload() *models.LogoutSuccess {
	return o.Payload
}

func (o *LogoutOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.LogoutSuccess)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogoutBadRequest creates a LogoutBadRequest with default headers values
func NewLogoutBadRequest() *LogoutBadRequest {
	return &LogoutBadRequest{}
}

/*
LogoutBadRequest describes a response with status code 400, with default header values.

Bad Request
*/
type LogoutBadRequest struct {
}

// IsSuccess returns true when this logout bad request response has a 2xx status code
func (o *LogoutBadRequest) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this logout bad request response has a 3xx status code
func (o *LogoutBadRequest) IsRedirect() bool {
	return false
}

// IsClientError returns true when this logout bad request response has a 4xx status code
func (o *LogoutBadRequest) IsClientError() bool {
	return true
}

// IsServerError returns true when this logout bad request response has a 5xx status code
func (o *LogoutBadRequest) IsServerError() bool {
	return false
}

// IsCode returns true when this logout bad request response a status code equal to that given
func (o *LogoutBadRequest) IsCode(code int) bool {
	return code == 400
}

// Code gets the status code for the logout bad request response
func (o *LogoutBadRequest) Code() int {
	return 400
}

func (o *LogoutBadRequest) Error() string {
	return fmt.Sprintf("[POST /logout][%d] logoutBadRequest ", 400)
}

func (o *LogoutBadRequest) String() string {
	return fmt.Sprintf("[POST /logout][%d] logoutBadRequest ", 400)
}

func (o *LogoutBadRequest) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLogoutNotFound creates a LogoutNotFound with default headers values
func NewLogoutNotFound() *LogoutNotFound {
	return &LogoutNotFound{}
}

/*
LogoutNotFound describes a response with status code 404, with default header values.

User not found
*/
type LogoutNotFound struct {
	Payload string
}

// IsSuccess returns true when this logout not found response has a 2xx status code
func (o *LogoutNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this logout not found response has a 3xx status code
func (o *LogoutNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this logout not found response has a 4xx status code
func (o *LogoutNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this logout not found response has a 5xx status code
func (o *LogoutNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this logout not found response a status code equal to that given
func (o *LogoutNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the logout not found response
func (o *LogoutNotFound) Code() int {
	return 404
}

func (o *LogoutNotFound) Error() string {
	return fmt.Sprintf("[POST /logout][%d] logoutNotFound  %+v", 404, o.Payload)
}

func (o *LogoutNotFound) String() string {
	return fmt.Sprintf("[POST /logout][%d] logoutNotFound  %+v", 404, o.Payload)
}

func (o *LogoutNotFound) GetPayload() string {
	return o.Payload
}

func (o *LogoutNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLogoutInternalServerError creates a LogoutInternalServerError with default headers values
func NewLogoutInternalServerError() *LogoutInternalServerError {
	return &LogoutInternalServerError{}
}

/*
LogoutInternalServerError describes a response with status code 500, with default header values.

Server error
*/
type LogoutInternalServerError struct {
	Payload string
}

// IsSuccess returns true when this logout internal server error response has a 2xx status code
func (o *LogoutInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this logout internal server error response has a 3xx status code
func (o *LogoutInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this logout internal server error response has a 4xx status code
func (o *LogoutInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this logout internal server error response has a 5xx status code
func (o *LogoutInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this logout internal server error response a status code equal to that given
func (o *LogoutInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the logout internal server error response
func (o *LogoutInternalServerError) Code() int {
	return 500
}

func (o *LogoutInternalServerError) Error() string {
	return fmt.Sprintf("[POST /logout][%d] logoutInternalServerError  %+v", 500, o.Payload)
}

func (o *LogoutInternalServerError) String() string {
	return fmt.Sprintf("[POST /logout][%d] logoutInternalServerError  %+v", 500, o.Payload)
}

func (o *LogoutInternalServerError) GetPayload() string {
	return o.Payload
}

func (o *LogoutInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
